<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on What I Understood</title>
    <link>https://gharbaoui.github.io/posts/</link>
    <description>Recent content in Posts on What I Understood</description>
    <generator>Hugo -- 0.133.1</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Dec 2024 11:01:42 +0100</lastBuildDate>
    <atom:link href="https://gharbaoui.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Interrupt internals</title>
      <link>https://gharbaoui.github.io/posts/interrupts_internals/</link>
      <pubDate>Tue, 10 Dec 2024 11:01:42 +0100</pubDate>
      <guid>https://gharbaoui.github.io/posts/interrupts_internals/</guid>
      <description>I&amp;rsquo;ve worked with interrupts before, but as always, I like to understand what&amp;rsquo;s happening under the hood. while I had an intuitive idea of how interrupts might work, I didn&amp;rsquo;t know the specifics for this particular architecture. Now I&amp;rsquo;ll be diving into how interrupts are handled by the ARM Cortex-M4. This is not a tutorial on how to set up interrupts. Instead, it&amp;rsquo;s an explanation of what happens from the moment the NVIC line goes HIGH until the core begins executing your interrupt handler.</description>
    </item>
    <item>
      <title>Interrupts</title>
      <link>https://gharbaoui.github.io/posts/interrupts/</link>
      <pubDate>Sat, 23 Nov 2024 10:13:09 +0100</pubDate>
      <guid>https://gharbaoui.github.io/posts/interrupts/</guid>
      <description>Interrupts what are interrupts? why? how? In short an interrupt is a request for the system to pause what it is currently executing and temporarily switch to handling something else, often a higher-priority task.
Imagine your software is busy performing a taskâ€”perhaps blinking an LED or managing something more complex. Suddenly, an unexpected event occurs: a button is pressed, a divide-by-zero error arises, or a PC sensor detects overheating. How do you handle this exceptional scenario?</description>
    </item>
    <item>
      <title>From Power Up to Main: The Journey of Code Execution</title>
      <link>https://gharbaoui.github.io/posts/from_powerup_to_main_a_jouney_of_code_execution/</link>
      <pubDate>Tue, 05 Nov 2024 12:02:28 +0100</pubDate>
      <guid>https://gharbaoui.github.io/posts/from_powerup_to_main_a_jouney_of_code_execution/</guid>
      <description>Assumptions I&amp;rsquo;m assuming you have some basic knowledge of the compilation process and a little about linkers, you don&amp;rsquo;t need to be an expert
Why Understanding Matters I&amp;rsquo;m not a big fan of the idea that I can just press the green button and, boom, my code is somehow executing and being debugged on my MCU. I always like to understand what happens before I start using that IDE. In this article, you&amp;rsquo;ll learn what goes on under the hood, and this knowledge can help you become independent from any IDE but also enable you to add custom frimware maybe your OS&amp;hellip;</description>
    </item>
    <item>
      <title>Perspective Projection Matrix</title>
      <link>https://gharbaoui.github.io/posts/perspective_matrix/</link>
      <pubDate>Sun, 01 Sep 2024 08:26:12 +0100</pubDate>
      <guid>https://gharbaoui.github.io/posts/perspective_matrix/</guid>
      <description>I usually find it hard to take something at face value, while doing some graphics programming, I frequently came across matrices, and for the most part, they were not that complex since I knew some linear algebra beforehand. However, the perspective projection matrix seemed confusing, and I couldn&amp;rsquo;t wrap my head around it, so I decided to reconstruct it from the ground up
Intuition Well, we have a 3D scene, but our screen is 2D.</description>
    </item>
  </channel>
</rss>
